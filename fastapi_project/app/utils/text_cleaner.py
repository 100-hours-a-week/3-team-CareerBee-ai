import re

REPLACEMENTS = {
    "했다.": "했습니다.",
    "하였다.": "하였습니다.",
    "됐다.": "됐습니다.",
    "되었다.": "되었습니다.",
    "이다.": "입니다.",
    "한다.": "합니다.",
    "있다.": "있습니다.",
    "았다.": "았습니다.",
    "된다.": "됩니다.",
    "많다.": "많습니다.",
    "밝혔다.": "밝혔습니다.",
    "얘기다.": "얘기입니다.",
    "왔다.": "왔습니다.",
    "졌다.": "졌습니다.",
    "보인다.": "보입니다.",
    "었다.": "었습니다.",
    "섰다.": "섰습니다.",
    "렸다.": "렸습니다.",
    "랐다.": "랐습니다.",
    "따른다.": "따릅니다.",
    "아니다.": "아닙니다.",
    "맡는다.": "맡습니다.",
    "같다.": "같습니다.",
    "딘계다.": "단계입니다.",
    "없다.": "없습니다.",
    "온다.": "옵니다.",
    "낮다.": "낮습니다.",
    "춥다.": "춥습니다.",
    "덥다.": "덥습니다.",
    "간다.": "갑니다.",
    "모은다.": "모읍니다.",
    "떴다.": "떴습니다.",
    "꼽힌다.": "꼽힙니다.",
    "받는다.": "받습니다.",
    "줄인다.": "줄입니다.",
    "늘린다.": "늘립니다.",
    "높인다.": "높입니다.",
    "강조한다.": "강조합니다.",
    "추진한다.": "추진합니다.",
    "도입한다.": "도입합니다.",
    "개선한다.": "개선합니다.",
    "적용한다.": "적용합니다.",
    "공략한다.": "공략합니다.",
    "집중한다.": "집중합니다.",
    "확대한다.": "확대합니다.",
    "제공한다.": "제공합니다.",
    "운영한다.": "운영합니다.",
    "확보한다.": "확보합니다.",
    "도전한다.": "도전합니다.",
    "출시한다.": "출시합니다.",
    "선정됐다.": "선정됐습니다.",
    "선정되었다.": "선정되었습니다.",
    "전략이다.": "전략입니다.",
    "목표다.": "목표입니다.",
    "이유다.": "이유입니다.",
    "의미다.": "의미입니다.",
    "방안이다.": "방안입니다.",
    "역할이다.": "역할입니다."
}

EXCLUDE_KEYWORDS_BY_CORP = {
    "케이크": ["디저트", "레터링", "주문 제작", "크림", "기념", "빵집", "부티끄", "커피", "초콜랏", "아이스크림", "크리스마스", "수건 케이크", "망고", "생크림", "파리바게뜨", "편의점", "크레이프"],
    "구름": ["날씨", "기상", "구름 물리", "인공 강우", "기상청", "기후", "하늘", "증발", "스카이", "인공 구름", "PLP", "지진운", "기온", "소나기", "구름다리"],
    "숲": ["도시숲", "치유의 숲", "산림청", "삼림", "자연", "초록", "생태", "산림", "숲속", "산림욕", "나무", "휴양림", "휴양", "도시숲", "국립공원", "도심숲"],
    "상상인": ["KLPGA", "골프 대회", "프로", "골프"],
    "다우기술": ["다우지수", "뉴욕증시", "증권", "나스닥", "미국"],
    "크림": ["보습 크림", "올리브영", "티트리", "스킨케어", "화장품", "진정 크림", "수딩 크림", "보습 제품", "H&B", "피부 장벽", "피부"]
}

def clean_summary(summary: str, corp_name: str, max_len: int = 1500) -> str:
    # '요약' 포함 문장 제거
    summary = re.sub(r"[^.\n]*요약[^.\n]*[.]\s*", "", summary, flags=re.IGNORECASE)

    # 표현 일괄 치환
    for casual, polite in REPLACEMENTS.items():
        summary = summary.replace(casual, polite) 

    # 길이 초과 시 문장 단위로 자르기 ('다.' 기준)
    sentences = re.split(r"(.*?다\.)", summary)
    sentences = [s.strip() for s in sentences if s.strip()]
    trimmed = ""
    total_len = 0
    for sent in sentences:
        if total_len + len(sent) > max_len:
            break
        trimmed += sent + " "
        total_len += len(sent) + 1

    return trimmed.strip()

def contains_excluded_keyword(text, corp):
    exclude_keywords = EXCLUDE_KEYWORDS_BY_CORP.get(corp, [])
    return any(keyword in text for keyword in exclude_keywords)

# 사용 예시:
# summary = generate_summary()
# summary = clean_summary(summary, corp_name)
# if not contains_excluded_keyword(article_text, corp_name):
#     process(article_text)
