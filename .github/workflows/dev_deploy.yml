name: Deploy AI Server to GCE (DEV)

on:
  push:
    branches: [ develop ]

jobs:
  "Deploy-DEV":
    runs-on: ubuntu-latest

    env:
      COMMIT_HASH: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decrypt env file
        run: |
          openssl enc -aes-256-cbc -d -pbkdf2 -in cicd-variables.sh.enc -out cicd-variables.sh -k "${{ secrets.DEV_CICD_VARIABLES_ENC_PW }}"
          chmod +x cicd-variables.sh

      - name: Load selected env variables into GitHub Environment
        run: |
          source ./cicd-variables.sh

          echo "::add-mask::$SSH_KEY"
          echo "::add-mask::$SSH_KEY_BASE64"
          echo "::add-mask::$GCP_SERVER_IP"
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$AWS_DEFAULT_REGION"
          echo "::add-mask::$S3_BUCKET_INFRA"
          echo "::add-mask::$APP_ENV"
          echo "::add-mask::$VLLM_URL"
          echo "::add-mask::$PYTHONPATH"
          echo "::add-mask::$DB_HOST"
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_PASSWORD"
          echo "::add-mask::$DB_NAME"
          echo "::add-mask::$OPENAI_API_KEY"

          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV
          echo "SSH_KEY_BASE64=$SSH_KEY_BASE64" >> $GITHUB_ENV
          echo "GCP_SERVER_IP=$GCP_SERVER_IP" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "S3_BUCKET_INFRA=$S3_BUCKET_INFRA" >> $GITHUB_ENV
          echo "APP_ENV=${APP_ENV}" >> $GITHUB_ENV
          echo "VLLM_URL=${VLLM_URL}" >> $GITHUB_ENV
          echo "PYTHONPATH=${PYTHONPATH}" >> $GITHUB_ENV
          echo "DB_HOST=${DB_HOST}" >> $GITHUB_ENV
          echo "DB_USER=${DB_USER}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${DB_PASSWORD}" >> $GITHUB_ENV
          echo "DB_NAME=${DB_NAME}" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> $GITHUB_ENV

      - name: Restore SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY_BASE64}" | base64 --decode > "${SSH_KEY}"
          chmod 600 "${SSH_KEY}"

      - name: Create .env file
        run: |
          echo "APP_ENV=${APP_ENV}" >> .env
          echo "VLLM_URL=${VLLM_URL}" >> .env
          echo "PYTHONPATH=${PYTHONPATH}" >> .env
          echo "DB_HOST=${DB_HOST}" >> .env
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DB_NAME=${DB_NAME}" >> .env
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env

      - name: Set timestamp-based path (Asia/Seoul)
        run: |
          TIMESTAMP=$(TZ='Asia/Seoul' date +%Y-%m-%d_%H_%M_%S)
          echo "DEPLOY_PATH=${TIMESTAMP}_${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Upload build to S3
        run: |
          echo "Uploading to: ${S3_BUCKET_INFRA}/ai/${DEPLOY_PATH}"
          aws s3 cp .env "${S3_BUCKET_INFRA}/ai/${DEPLOY_PATH}/.env"
          aws s3 cp ./fastapi_project/ "${S3_BUCKET_INFRA}/ai/${DEPLOY_PATH}/" --recursive

      - name: Deploy on AI Server
        run: |
          ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${GCP_SERVER_IP}" <<EOF
            set -e

            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

            mkdir -p ~/release ~/logs
            aws s3 cp "${S3_BUCKET_INFRA}/ai/${DEPLOY_PATH}/" ~/release/ --recursive

            pkill -f "uvicorn" || true

            export TMPDIR=/mnt/ssd
            source \${TMPDIR}/venv/bin/activate
            
            mkdir -p \${TMPDIR}/tmp
            pip install --upgrade pip pip setuptools wheel
            pip install --no-cache-dir --no-binary PyMuPDF "PyMuPDF==1.22.3"
            pip install --no-cache-dir --prefer-binary --find-links \${TMPDIR}/tmp -r ~/release/requirements.txt

            cd ~/release
            nohup \${TMPDIR}/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 > /var/log/uvicorn.log 2>&1 &
          EOF

      - name: Health check and rollback if needed
        run: |
          set -e
          for i in $(seq 1 5); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://dev-ai.careerbee.co.kr/health")
            if [ "$STATUS" == "200" ]; then
              break
            fi
            echo $STATUS
            sleep 10
          done

          if [ "$STATUS" != "200" ]; then
            LATEST_VALID_BACKUP=$(aws s3 ls "${S3_BUCKET_INFRA}/ai/" | awk '{print $2}' | grep -v "^${DEPLOY_PATH}/$" | sort | tail -n 1 | sed 's#/$##')
            if [ -z "$LATEST_VALID_BACKUP" ]; then
              exit 1
            fi

            ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${GCP_SERVER_IP}" <<EOF
              set -e
              export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
              export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
              export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

              mkdir -p ~/release ~/logs
              aws s3 cp "${S3_BUCKET_INFRA}/ai/${LATEST_VALID_BACKUP}/" ~/release/ --recursive

              pkill -f "uvicorn" || true

              export TMPDIR=/mnt/ssd
              source \${TMPDIR}/venv/bin/activate
              
              mkdir -p \${TMPDIR}/tmp
              pip install --upgrade pip pip setuptools wheel
              pip install --no-cache-dir --no-binary PyMuPDF "PyMuPDF==1.22.3"
              pip install --no-cache-dir --prefer-binary --find-links \${TMPDIR}/tmp -r ~/release/requirements.txt

              cd ~/release
              nohup \${TMPDIR}/venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000 > /var/log/uvicorn.log 2>&1 &
          EOF
            
            aws s3 rm "${S3_BUCKET_INFRA}/ai/${DEPLOY_PATH}/" --recursive

            exit 1
          fi

      - name: Notify Discord on Success
        if: success()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          [🔗 실행 로그 보기](${RUN_URL})"

          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "✅ 개발 환경에 AI 배포 성공",
                  "description": $desc,
                  "color": 65280,
                  "footer": { "text": "GitHub Actions - DEV Deploy(AI)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          [🔗 실행 로그 보기](${RUN_URL})"

          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "❌ 개발 환경에 AI 배포 실패",
                  "description": $desc,
                  "color": 16711680,
                  "footer": { "text": "GitHub Actions - DEV Deploy(AI)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
