name: Deploy AI Server to GCP Compute Engine (Prod)

on:
  push:
    branches: [main]

jobs:
  Deploy-PROD:
    runs-on: ubuntu-latest

    env:
      COMMIT_HASH: ${{ github.sha }}
      ECR_REPOSITORY: ${{ secrets.PROD_ECR_URI }}
      ECR_REGION: ap-northeast-2

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: google auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROD_GCP_PROJECT_ID }}

      - name: Set timestamp-based image tag (Asia/Seoul)
        run: |
          TIMESTAMP=$(TZ='Asia/Seoul' date +%Y%m%d-%H%M%S)
          echo "IMAGE_TAG=${TIMESTAMP}-${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENTS }}" > .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_GCE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_GCE_HOST }} >> ~/.ssh/known_hosts

      - name: Copy .env to GCE instance
        run: |
          scp -i ~/.ssh/id_rsa .env ${{ secrets.PROD_GCE_USER }}@${{ secrets.PROD_GCE_HOST }}:/home/ssmu-morgan/ai/.env

      - name: Trigger remote deploy script on GCE (docker run)
        run: |
          ssh ${{ secrets.PROD_GCE_USER }}@${{ secrets.PROD_GCE_HOST }} <<EOF
            set -e
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            # 기존 ai 컨테이너 중지 및 삭제 (실행 중이면)
            docker stop careerbee-ai || true
            docker rm careerbee-ai || true

            # 최신 이미지 pull (로그인 생략 가능: 이미 public or 로그인 완료된 상태면)
            docker pull ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

            # 새 컨테이너 실행 (PORT, VOLUME, ENV 등에 맞춰 수정)
            docker run -d \
              --name careerbee-ai \
              --env-file /home/ssmu-morgan/ai/.env \
              -p 8000:8000 \
              --restart=always \
              --env-file /home/ssmu-morgan/ai/.env \
              -v /mnt/ssd/venv:/mnt/ssd/venv:ro \
              -v /home/ssmu-morgan/ai:/app \
              ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG \
              /bin/bash -c "source /mnt/ssd/venv/bin/activate && uvicorn app.main:app --host 0.0.0.0 --port 8000"

          EOF

      - name: Notify Discord on Success
        if: success()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          [🔗 실행 로그 보기](${RUN_URL})"

          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "✅ 프로덕션 환경에 AI 배포 성공",
                  "description": $desc,
                  "color": 65280,
                  "footer": { "text": "GitHub Actions - PROD Deploy(AI)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          [🔗 실행 로그 보기](${RUN_URL})"

          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "❌ 프로덕션 환경에 AI 배포 실패",
                  "description": $desc,
                  "color": 16711680,
                  "footer": { "text": "GitHub Actions - PROD Deploy(AI)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json

          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}
